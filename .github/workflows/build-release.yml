name: Build and Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version name for manual build (e.g., 1.0.0)'
        required: false
        default: '1.0.0'

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Get version name
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=${VERSION#v}" >> $GITHUB_OUTPUT
          
      - name: Update version in build.gradle
        run: |
          VERSION_NAME="${{ steps.version.outputs.VERSION_NAME }}"
          VERSION_CODE=$(date +%Y%m%d%H)
          sed -i "s/versionCode .*/versionCode $VERSION_CODE/" app/build.gradle
          sed -i "s/versionName .*/versionName \"$VERSION_NAME\"/" app/build.gradle
      
      - name: Build Debug APK
        run: ./gradlew assembleDebug
        
      - name: Build Release APK
        run: ./gradlew assembleRelease
      
      - name: Upload Debug APK
        uses: actions/upload-artifact@v3
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
          
      - name: Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release-unsigned.apk
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Ayo Chat ${{ steps.version.outputs.VERSION }}
          body: |
            ## Ayo Chat ${{ steps.version.outputs.VERSION }}
            
            ### Features
            - Real-time messaging
            - Multiple chat rooms
            - Device-based authentication
            - Message deletion
            - Typing indicators
            - Country flags
            - Offensive word filtering
            
            ### Installation
            1. Download the APK file below
            2. Enable "Install from Unknown Sources" in your Android settings
            3. Install the APK
            4. Open Ayo Chat and start chatting!
            
            ### Requirements
            - Android 5.0 (API 21) or higher
            - Internet connection
            
            ### Server
            Connected to: https://api.naderr.link
          draft: false
          prerelease: false
      
      - name: Upload Debug APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/debug/app-debug.apk
          asset_name: AyoChat-${{ steps.version.outputs.VERSION_NAME }}-debug.apk
          asset_content_type: application/vnd.android.package-archive
          
      - name: Upload Release APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release-unsigned.apk
          asset_name: AyoChat-${{ steps.version.outputs.VERSION_NAME }}-release-unsigned.apk
          asset_content_type: application/vnd.android.package-archive

  build-signed:
    name: Build Signed APK
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: Get version name
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Decode Keystore
        if: env.KEYSTORE_BASE64 != ''
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $KEYSTORE_BASE64 | base64 -d > app/keystore.jks
          
      - name: Build Signed APK
        if: env.KEYSTORE_BASE64 != ''
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
      
      - name: Upload Signed APK
        if: env.KEYSTORE_BASE64 != ''
        uses: actions/upload-artifact@v3
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        with:
          name: signed-release-apk
          path: app/build/outputs/apk/release/app-release.apk
      
      - name: Get Release Upload URL
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Upload Signed APK to Release
        if: env.KEYSTORE_BASE64 != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: AyoChat-${{ steps.version.outputs.VERSION_NAME }}-signed.apk
          asset_content_type: application/vnd.android.package-archive
